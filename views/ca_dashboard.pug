//- FILE: views/ca_dashboard.pug

extends layout

block content
  //- Setzt die Variable 'title', die von partials/header.pug verwendet wird
  - let pageTitle = `Dashboard: ${caName}`
  
  //- Anzeigen von Erfolgs- oder Fehlermeldungen
  if message && message.length > 0
    .message.success= message
  if error && error.length > 0
    .message.error= error

  //- Karte 2: Verwaltete X.509-Zertifikate
  .form-card
    h3 Verwaltete X.509 Zertifikate
    table
      thead
        tr
          th Status
          th Typ
          th Common Name
          th Seriennummer
          th Aktionen
      tbody
        if x509Certs.length === 0
          tr
            td(colspan="5", style="text-align: center;") Noch keine X.509-Zertifikate ausgestellt.
        else
          each cert in x509Certs
            tr
              td
                - let statusClass = 'status-R', statusText = cert.status
                if cert.status === 'V'
                  - statusClass = 'status-V', statusText = 'Gültig'
                else if cert.status === 'R'
                  - statusClass = 'status-R', statusText = 'Widerrufen'
                else if cert.status === 'E'
                  - statusClass = 'status-E', statusText = 'Abgelaufen'
                span.status-badge(class=statusClass)= statusText
                if cert.status === 'R'
                  small= `am ${cert.revocationDate}`
              td= cert.type
              td= cert.commonName
              td
                small= cert.serial
              td.actions-cell
                if cert.status === 'V'
                  //- Download
                  if cert.type === 'Client'
                    a.btn.btn-secondary(href=`/ca/${caName}/download/x509/${cert.serial}/p12`) Download .p12
                  else if cert.type === 'Server'
                    a.btn.btn-secondary(href=`/ca/${caName}/download/x509/${cert.serial}/zip`) Download .zip
                  
                  //- Snippets (nur für Server)
                  if cert.type === 'Server'
                    button.btn.btn-secondary(onclick=`openSnippetModal('${caName}', '${cert.serial}', '${cert.commonName}')`) Snippets
                  
                  //- Details
                  button.btn.btn-secondary(onclick=`openDetailsModal('${caName}', '${cert.serial}')`) Details

                  //- Erneuern
                  form(action=`/ca/${caName}/renew/x509/${cert.serial}`, method="POST")
                    input(type="password", name="caPassword", placeholder="CA Passwort", required, style="width:120px; font-size:0.8rem;")
                    button.btn.btn-secondary(type="submit") Erneuern
                  
                  //- Widerrufen
                  form(action=`/ca/${caName}/revoke-x509`, method="POST")
                    input(type="hidden", name="serial", value=cert.serial)
                    input(type="password", name="caPassword", placeholder="CA Passwort", required, style="width: 120px; font-size: 0.8rem;")
                    button.btn.btn-danger(type="submit", onclick="return confirm('Sind Sie sicher?');") Widerrufen
                else
                  span -

  //- Karte 4: Verwaltete PGP-Schlüssel
  .form-card
    h3 Verwaltete PGP Schlüssel
    table
      thead
        tr
          th Name / E-Mail
          th Fingerprint
          th Erstellt
          th Aktionen
      tbody
        if pgpKeys.length === 0
          tr
            td(colspan="4", style="text-align: center;") Noch keine PGP-Schlüssel erstellt.
        else
          each key in pgpKeys
            tr
              td= key.uids.join(', ')
              td
                small= key.fingerprint
              td= key.created
              td.actions-cell
                a.btn.btn-secondary(href=`/ca/${caName}/pgp/${key.fingerprint}/pub`, target="_blank") Public Key
                form(action=`/ca/${caName}/pgp/${key.fingerprint}/show-password`, method="POST")
                  input(type="password", name="caPassword", placeholder="CA Passwort", required, style="width:120px; font-size:0.8rem;")
                  button.btn.btn-secondary(type="submit") Passwort anzeigen
                form(action=`/ca/${caName}/pgp/${key.fingerprint}/download-private`, method="POST")
                  input(type="password", name="caPassword", placeholder="CA Passwort", required, style="width:120px; font-size:0.8rem;")
                  button.btn.btn-danger(type="submit") Download Private

    //- Modal-Fenster für Snippets
    #snippetModal.modal
      .modal-content
        span.close-btn(onclick="closeSnippetModal()") &times;
        h2 Konfigurations-Snippets für 
          span#snippet-cn
        .snippet-options
          label(for="verifyClient") Client-Verifizierung (mTLS):
          select#verifyClient(onchange="generateSnippets()")
            option(value="off", selected) Aus (Standard für Webseiten)
            option(value="on") An (Strikte Prüfung)
            option(value="optional") Optional
        h3 Nginx
        pre
          code#nginx-snippet Generiere Snippet...
        h3 Apache
        pre
          code#apache-snippet Generiere Snippet...
    
    script.
      const modal = document.getElementById("snippetModal");
      let currentCaName = "";
      let currentCommonName = "";

      function openSnippetModal(caName, serial, commonName) {
        currentCaName = caName;
        currentCommonName = commonName;
        document.getElementById("snippet-cn").textContent = commonName;
        document.getElementById("verifyClient").value = "off";
        generateSnippets();
        modal.style.display = "block";
      }

      function closeSnippetModal() {
        modal.style.display = "none";
      }

      async function generateSnippets() {
        const verify = document.getElementById("verifyClient").value;
        try {
          const response = await fetch(`/api/ca/${currentCaName}/snippets/${currentCommonName}?verify=${verify}`);
          if (!response.ok) throw new Error("Network response was not ok.");
          const data = await response.json();
          document.getElementById("nginx-snippet").textContent = data.nginx;
          document.getElementById("apache-snippet").textContent = data.apache;
        } catch (error) {
          document.getElementById("nginx-snippet").textContent = "Fehler beim Laden der Snippets.";
          document.getElementById("apache-snippet").textContent = "Fehler beim Laden der Snippets.";
          logger.error("Fetch error:", error);
        }
      }

      window.onclick = function (event) {
        if (event.target == modal) {
          closeSnippetModal();
        }
      };